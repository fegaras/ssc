type list[T] = { head: T, tail: list[T] }

var n = 100;

var x: list[int] = ();

for ( k = 1 to n )
   x = { head=k, tail=x }

def cons[T] ( i: T, l: list[T] ): list[T] {
  return { head=i, tail=l }
}

def printl ( l: list[int] ) {
  if (l <> ()) {
     print(l.head);
     printl(l.tail);
  }
}

def append1[T] ( i: T, l: list[T] ): list[T] {
  if (l == ())
     return { head=i, tail=() }
  return { head=l.head, tail=append1(i,l.tail) }
}

def append[T] ( x: list[T], y: list[T] ): list[T] {
  if (x == ())
     return y;
  return { head=x.head, tail=append(x.tail,y) }
}

def reverse[T] ( l: list[T] ): list[T] {
  if (l == ())
     return ();
  return append1(l.head,reverse(l.tail));
}

def map[T,S] ( l: list[T], f: (T) -> S ): list[S] {
  if (l == ())
     return ();
  return { head=f(l.head), tail=map(l.tail,f) }
}

printl(x);
print("****");
def addn ( i:int ):int {return i+n};
printl(reverse(map(x,addn)));
printl(reverse(map(x,function (i:int):int { return i+1; })));
x = reverse(map(x,function (i:int):int { return i+1; }));

var z: list[{a:int,b:string}] = ();
z = { head={ a=67, b="asd" }, tail=z }
var cc = z.head.a;
z = reverse(z);
print(z.head.b);

type at[T] = (T,array[T]);

var u: at[string] = ("aa",["a","b","c"]);
print(u#1[2]);

type ll[Q,S] = list[(S,list[Q])];

var b: ll[list[int],string] = cons(("a",cons(x,())),());

b = reverse(b);

var p = map(b,function (x:(string,list[list[int]])):string { var z = x#0; return z; });


var w = map(x,function(z:int):float{return 0.0});
def add ( n: float ): (float)->float {
  return function(m:float):float{return n+m}
}
var ii = map(w,add(10.0));
